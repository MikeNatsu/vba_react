[{"D:\\coding\\vba_vault\\vba_react\\src\\index.js":"1","D:\\coding\\vba_vault\\vba_react\\src\\components\\mainAppLayout\\appHeader.js":"2","D:\\coding\\vba_vault\\vba_react\\src\\reducers\\index.js":"3","D:\\coding\\vba_vault\\vba_react\\src\\components\\create_vault\\index.js":"4","D:\\coding\\vba_vault\\vba_react\\src\\components\\about_page\\index.js":"5","D:\\coding\\vba_vault\\vba_react\\src\\reducers\\vaultBuilderReducer.js":"6","D:\\coding\\vba_vault\\vba_react\\src\\reducers\\appStateReducer.js":"7","D:\\coding\\vba_vault\\vba_react\\src\\reducers\\columnChoicesReducer.js":"8","D:\\coding\\vba_vault\\vba_react\\src\\actions\\index.js":"9","D:\\coding\\vba_vault\\vba_react\\src\\apis\\parseRequest.js":"10","D:\\coding\\vba_vault\\vba_react\\src\\components\\create_vault\\vault_constructors\\informationBoxContainer.js":"11","D:\\coding\\vba_vault\\vba_react\\src\\components\\create_vault\\vault_constructors\\menuConstructor.js":"12","D:\\coding\\vba_vault\\vba_react\\src\\components\\create_vault\\vault_constructors\\templateInputArea.js":"13","D:\\coding\\vba_vault\\vba_react\\src\\components\\create_vault\\vault_constructors\\templateDisplayConstructor.js":"14","D:\\coding\\vba_vault\\vba_react\\src\\components\\create_vault\\vault_constructors\\decorator_component\\navLinkBar.js":"15","D:\\coding\\vba_vault\\vba_react\\src\\components\\create_vault\\vault_constructors\\decorator_component\\setPasswordModal.js":"16","D:\\coding\\vba_vault\\vba_react\\src\\components\\create_vault\\vault_constructors\\decorator_component\\enterEditorPwModal.js":"17"},{"size":719,"mtime":1624767103417,"results":"18","hashOfConfig":"19"},{"size":2435,"mtime":1624767349078,"results":"20","hashOfConfig":"19"},{"size":472,"mtime":1616901700000,"results":"21","hashOfConfig":"19"},{"size":3468,"mtime":1624766559971,"results":"22","hashOfConfig":"19"},{"size":2347,"mtime":1615535622000,"results":"23","hashOfConfig":"19"},{"size":1536,"mtime":1624681346961,"results":"24","hashOfConfig":"19"},{"size":1394,"mtime":1618553776000,"results":"25","hashOfConfig":"19"},{"size":456,"mtime":1613262140000,"results":"26","hashOfConfig":"19"},{"size":5471,"mtime":1624507162144,"results":"27","hashOfConfig":"19"},{"size":102,"mtime":1609652404000,"results":"28","hashOfConfig":"19"},{"size":8360,"mtime":1618032432000,"results":"29","hashOfConfig":"19"},{"size":9989,"mtime":1624766717917,"results":"30","hashOfConfig":"19"},{"size":9454,"mtime":1624680181198,"results":"31","hashOfConfig":"19"},{"size":7834,"mtime":1624766653577,"results":"32","hashOfConfig":"19"},{"size":1963,"mtime":1618039378000,"results":"33","hashOfConfig":"19"},{"size":4996,"mtime":1618381980000,"results":"34","hashOfConfig":"19"},{"size":1912,"mtime":1622086120628,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"owxyhk",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},"D:\\coding\\vba_vault\\vba_react\\src\\index.js",["76"],"D:\\coding\\vba_vault\\vba_react\\src\\components\\mainAppLayout\\appHeader.js",[],"D:\\coding\\vba_vault\\vba_react\\src\\reducers\\index.js",[],["77","78"],"D:\\coding\\vba_vault\\vba_react\\src\\components\\create_vault\\index.js",["79","80","81","82","83","84"],"D:\\coding\\vba_vault\\vba_react\\src\\components\\about_page\\index.js",[],"D:\\coding\\vba_vault\\vba_react\\src\\reducers\\vaultBuilderReducer.js",[],"D:\\coding\\vba_vault\\vba_react\\src\\reducers\\appStateReducer.js",[],"D:\\coding\\vba_vault\\vba_react\\src\\reducers\\columnChoicesReducer.js",[],"D:\\coding\\vba_vault\\vba_react\\src\\actions\\index.js",[],"D:\\coding\\vba_vault\\vba_react\\src\\apis\\parseRequest.js",[],"D:\\coding\\vba_vault\\vba_react\\src\\components\\create_vault\\vault_constructors\\informationBoxContainer.js",["85","86","87","88","89","90","91","92","93","94","95"],"import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Resizable } from \"re-resizable\";\r\nimport { propTypes } from 'react-bootstrap/esm/Image';\r\nimport { Accordion, Icon, Button, Tab} from 'semantic-ui-react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { vaultFunctionClicked } from '../../../actions'\r\n\r\nconst InformationBoxContainer = (props) => {\r\n    let history = useHistory()\r\n    const [popupActive, setpopupActive] = useState(false)\r\n    const [codeHash, setCodeHash] = useState('')\r\n\r\n    const codeBlockDescription = () => {\r\n        // console.log('this is the code hash', functionSelected)\r\n        let funcDesciptionTxt;\r\n        let funcHeaderTxt;\r\n\r\n        if (props.templateCode !== '') {\r\n\r\n            if (props.functionSelected == 'overall_descrip'){\r\n                funcDesciptionTxt = props.templateTagData['overall_descrip']\r\n                funcHeaderTxt = \"Overall Description\"\r\n                \r\n            } else {\r\n                funcDesciptionTxt = props.templateTagData['func_descrip'][props.functionSelected]\r\n                funcHeaderTxt = props.functionSelected + ' Description'\r\n            }\r\n\r\n            funcDesciptionTxt = funcDesciptionTxt === '' ? 'No Descrption Provided' : funcDesciptionTxt\r\n\r\n            return (\r\n                <div>\r\n                    <p className=\"descrip-header\">{funcHeaderTxt}</p>\r\n                    <p className=\"descrip-txt\">\r\n                        {funcDesciptionTxt}\r\n                    </p>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log('info box container loaded')\r\n    }, [props.menuOptions, props.vaultMenuClicked, props.menuItemSelected, props.functionList])\r\n\r\n\r\n\r\n    const paneConstructor = () => {\r\n        let indPanes\r\n        if ((props.menuOptions !== '') && (props.menuItemSelected === '')){\r\n            return (\r\n                <div>Must click on a template to start</div>\r\n            )\r\n        } else if (((props.menuItemSelected !== '') && (props.functionList !== '')) || (props.templateCode != '')) {\r\n            indPanes = [\r\n                {\r\n                    menuItem: 'Subroutines',\r\n                    render: () => populateFunctions('sub')\r\n                },\r\n                {\r\n                    menuItem: 'Functions',\r\n                    render: () => populateFunctions('func')\r\n                }\r\n            ]\r\n    \r\n            return <Tab className=\"breakdown-btn-cont\" menu={{ pointing: true }} panes={indPanes} />\r\n        }\r\n\r\n    }\r\n\r\n    const copyCodeLinkOnClick = (codeBlockName) => {\r\n        let fullUrl = window.location.origin + history.location.pathname + \"#\" + codeBlockName\r\n        // console.log ('this is the fullUrl ', fullUrl)\r\n        navigator.clipboard.writeText(fullUrl)\r\n    }\r\n\r\n    const getCopyLinkPopupStatus = (codeBlockName) => {\r\n        if (codeBlockName == codeHash) {\r\n            return \"copy-link-popup active\"\r\n        } else {\r\n            return \"copy-link-popup\"\r\n        }\r\n    }\r\n\r\n    const getFunctionButtonActiveStatus = (codeBlockName) => {\r\n        if (codeBlockName == props.functionSelected) {\r\n            return \"breakdown-btn active\"\r\n        } else {\r\n            return \"breakdown-btn\"\r\n        }\r\n    }\r\n\r\n    const populateFunctions = (mode=null) => {\r\n        let functionButtonArea\r\n        if (mode == 'sub'){\r\n            functionButtonArea = props.functionList['sub'].map( (funcName) => {\r\n                return (\r\n                    <div className=\"code-btn-breakdown-cont\">\r\n                        <Button\r\n                            basic\r\n                            color=\"blue\"\r\n                            className = {getFunctionButtonActiveStatus(funcName)}\r\n                            onClick={() => {\r\n                                document.getElementById(funcName).scrollIntoView()\r\n                                props.vaultFunctionClicked(funcName)\r\n                                history.push('#'+ funcName)}}>\r\n                                {funcName}\r\n                        </Button>\r\n                        <div className={getCopyLinkPopupStatus(funcName)}>\r\n                            Link Copied\r\n                        </div>\r\n                        <Button\r\n                            basic\r\n                            color=\"blue\"\r\n                            className=\"copy-link\"\r\n                            onMouseLeave={()=>{setCodeHash('')}}\r\n                            onClick = {() => {\r\n                                    copyCodeLinkOnClick(funcName)\r\n                                    setCodeHash(funcName)\r\n                        }}>\r\n                            🔗\r\n                        </Button>\r\n                    </div>\r\n                    \r\n                \r\n                )\r\n            })\r\n\r\n            functionButtonArea.splice(0, 0,\r\n                <div className=\"code-btn-breakdown-cont\">\r\n                    <Button  \r\n                        basic\r\n                        color=\"blue\"\r\n                        className = {getFunctionButtonActiveStatus('overall_descrip')}\r\n                        onClick={() => {\r\n                            props.vaultFunctionClicked(\"overall_descrip\")}}>\r\n                        Overall Description\r\n                    </Button>\r\n                </div>\r\n\r\n            )\r\n            \r\n        } else if (mode == 'func') {\r\n            functionButtonArea = props.functionList['function'].map( (funcName) => {\r\n                return (\r\n                    <div className=\"code-btn-breakdown-cont\">\r\n                        <Button\r\n                            className={getFunctionButtonActiveStatus(funcName)}\r\n                            basic\r\n                            color=\"blue\"\r\n                            onClick={() => {\r\n                                document.getElementById(funcName).scrollIntoView()\r\n                                props.vaultFunctionClicked(funcName)\r\n                                history.push('#'+ funcName)}}>\r\n                                {funcName}\r\n                        </Button>\r\n                        <div className={getCopyLinkPopupStatus(funcName)}>\r\n                            Link Copied\r\n                        </div>\r\n                        <Button\r\n                            className=\"copy-link\"\r\n                            basic\r\n                            color=\"blue\"\r\n                            onMouseLeave={()=>{setCodeHash('')}}\r\n                            onClick = {() => {\r\n                                    copyCodeLinkOnClick(funcName)\r\n                                    setCodeHash(funcName)\r\n                                    }}>\r\n                            🔗\r\n                        </Button>\r\n                    </div>\r\n\r\n                \r\n                )\r\n            })\r\n        }\r\n\r\n        // return <Tab.Pane attached={false}>{functionButtonArea}</Tab.Pane>\r\n        return functionButtonArea\r\n        \r\n    }\r\n\r\n    return (\r\n        <Resizable   \r\n            defaultSize={{\r\n                width:377,\r\n                height:\"calc(100vh - 44px)\",\r\n            }}\r\n            className=\"informationBox\"\r\n            minWidth=\"400px\"\r\n            maxWidth=\"677px\"\r\n            enable={{ top:false, right:false, bottom:false, left:true, topRight:false, bottomRight:false, bottomLeft:false, topLeft:false }}\r\n            >\r\n\r\n                <div className=\"template-code-breakdown\">\r\n                    {paneConstructor()}\r\n                </div>\r\n\r\n                <div className=\"template-info-cont\">\r\n                    {codeBlockDescription()}\r\n                </div>\r\n            </Resizable>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return ({\r\n        'functionSelected': state.appState['functionSelected'],\r\n        'templateTagData': state.templateTags['data'],\r\n        'menuOptions': state.vaultSessionMenuData['data'],\r\n        'vaultMenuClicked': state.appState['menuClickedFlag'],\r\n        'menuItemSelected': state.appState['menuIdSelected'],\r\n        'functionList': state.templateTags['funcList'],\r\n        'templateCode' : state.templateTags['templateCode']\r\n    })\r\n}\r\n\r\nexport default connect(mapStateToProps, { vaultFunctionClicked })(InformationBoxContainer)","D:\\coding\\vba_vault\\vba_react\\src\\components\\create_vault\\vault_constructors\\menuConstructor.js",["96","97","98","99","100","101"],"D:\\coding\\vba_vault\\vba_react\\src\\components\\create_vault\\vault_constructors\\templateInputArea.js",["102","103","104"],"import React, {useEffect, useState} from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { setVaultID, vaultTemplateSubmitted } from '../../../actions';\r\nimport parseRequestAxio from '../../../apis/parseRequest';\r\nimport { Button, Label } from 'semantic-ui-react';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\nconst TemplateInputArea = (props) => {\r\n    let history = useHistory()\r\n    const [passwordDisplay, showPasswordDisplay] = useState(false)\r\n    const [postStatus, setPostStatus] = useState(false)\r\n    const [editorPw, setEditorPw] = useState('')\r\n\r\n    useEffect (()=>{\r\n        setEditorPw(makeid(4)) \r\n        console.log('use effect ran on templateInputArea')\r\n    }, [])\r\n\r\n    const resetVault = () => {\r\n        let tmp_vaultid;\r\n        tmp_vaultid = makeid(8)\r\n        history.push('/vaultID/' + tmp_vaultid)\r\n        props.setVaultID(tmp_vaultid)\r\n    }\r\n\r\n    \r\n    const validateInputs = (inputValues) => {\r\n        let error\r\n\r\n        const getErrorMessage = (mode, parsingType=null) => {\r\n            // let parsingRegexBegin = new RegExp(\"(?<!_\\n)^((private |public |friend |static )*)\" + mode + \".+\", 'gim')\r\n            let parsingRegexBegin = new RegExp(\"(?<!_\\n)^((private |public |friend |static )*)(\" + mode + \" ).+$\", 'gim')\r\n            let parsingRegexEnd = new RegExp(\"(?<!_\\\\n)^end \" + mode + \".*\", 'gim')\r\n            let parsingStatus = {'codeExists':false, 'errorMsg':null}\r\n            let parsingResultBegin = inputValues.match(parsingRegexBegin)\r\n            let parsingResultEnd = inputValues.match(parsingRegexEnd)\r\n            \r\n            console.log('parsing results  ', parsingResultBegin, parsingResultEnd)\r\n\r\n            if ((parsingResultBegin) || parsingResultEnd) {\r\n                parsingStatus['codeExists'] = true\r\n            }\r\n\r\n\r\n            if (parsingStatus['codeExists']){\r\n                if (!(parsingResultBegin) || !(parsingResultEnd) || (parsingResultBegin.length !== parsingResultEnd.length)){\r\n                    parsingStatus['errorMsg'] = 'One or more of your ' + mode + ' is not closed'\r\n                }\r\n            }\r\n\r\n            return parsingStatus\r\n        }    \r\n      \r\n        let functionParsingStatus = getErrorMessage('function')\r\n        let subParsingStatus = getErrorMessage('sub')\r\n        if (!(functionParsingStatus['codeExists']) && !(subParsingStatus['codeExists'])){\r\n            error = \"The code input area cannot be empty\"\r\n        } \r\n        \r\n        if (functionParsingStatus['errorMsg']){\r\n            error = functionParsingStatus['errorMsg']\r\n        }\r\n\r\n        if (subParsingStatus['errorMsg']){\r\n            error = subParsingStatus['errorMsg']\r\n        }\r\n\r\n        return error\r\n    }\r\n\r\n    const validateCateName = (values) => {\r\n        let errors\r\n        if (values === 'test'){\r\n            errors = \"this is supposed to happen\"\r\n        } else if (!(values)) {\r\n            errors = \"no input here\"\r\n        }\r\n\r\n        return errors\r\n    }\r\n    \r\n    const validateTemplateName = (values) => {\r\n        let errors\r\n        if (!(values)) {\r\n            errors = \"Must have an input here\"\r\n        }\r\n\r\n        return errors\r\n    }\r\n\r\n    const postNewVault = async (values) => {\r\n        values['vaultID'] =  props.vaultID\r\n        let response = await parseRequestAxio.post('/postNewVaultTemplate/', values)\r\n        if (props.templateCodeFlag) {\r\n            props.vaultTemplateSubmitted(false)\r\n        } else {\r\n            props.vaultTemplateSubmitted(true)\r\n        }\r\n    }\r\n\r\n    const displayAreaSize = () => {\r\n        if (props.viewerMode) {\r\n            return 'column2-area active'\r\n        } else {\r\n            return 'column2-area'\r\n        }\r\n    }\r\n    \r\n    const handleClose = () => {\r\n        showPasswordDisplay(false) \r\n    }\r\n\r\n    function makeid(length) {\r\n        var result           = '';\r\n        var characters       = 'abcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for ( var i = 0; i < length; i++ ) {\r\n           result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    const generateEditPassword = () => {\r\n        console.log('generate Edit Password loaded')\r\n        if ((passwordDisplay) && (!(postStatus))) {\r\n            console.log('this is the post status ==>', postStatus)\r\n            parseRequestAxio.post('/postEditPassword/', {'vaultId': props.vaultID,\r\n                                                        'editorPw': editorPw})\r\n            setPostStatus(true)\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    const showEditPassword = () => {\r\n        if (postStatus) {\r\n            return (<h1>{editorPw}</h1>)\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Modal\r\n                    aria-labelledby=\"transition-modal-title\"\r\n                    aria-describedby=\"transition-modal-description\"\r\n                    className=\"set-pw-modal-cont\"\r\n                    open={passwordDisplay}\r\n                    onClose={handleClose}\r\n                    closeAfterTransition\r\n                    BackdropComponent={Backdrop}\r\n                    BackdropProps={{\r\n                    timeout: 500,\r\n                    }}\r\n                >\r\n                    <Fade in={passwordDisplay}>\r\n                        <div className=\"show-pw-modal\">\r\n                            <h1>COPY DOWN THIS PASSWORD AS IT WILL ALLOW YOU TO DELETE TEMPLATES</h1>\r\n                            {generateEditPassword()}\r\n                            {showEditPassword()}\r\n                        </div>\r\n                    </Fade>\r\n                </Modal>\r\n                <Formik\r\n                    initialValues = {{\r\n                        vbaInput: '',\r\n                        templateNameInput: '',\r\n                        templateCateInput: ''\r\n                    }}\r\n\r\n                    onSubmit = {values => {\r\n                                    values.templateCateInput = values.templateCateInput === '' ? \"All Category\" : values.templateCateInput\r\n                                    postNewVault(values)\r\n                                    if (props.firstTimeLoad) {\r\n                                        console.log('showPasswordIdsplay shows up')\r\n                                        showPasswordDisplay(true)\r\n                                    }\r\n                                    }// }\r\n                                }\r\n\r\n                    validateOnChange = {false}\r\n                >\r\n\r\n                {({ errors, touched, validateField, values, validateForm}) => (\r\n                    <div className={displayAreaSize()}>\r\n                        <Form  className='vba-codeinput'>\r\n                            <div className=\"input-options-cont\">\r\n                                <div>\r\n                                    <label className=\"inputTemplateLabel\" htmlFor=\"templateCateInput\">Template Category Name:</label>\r\n                                    <Field id=\"templateCateInput\" name=\"templateCateInput\" className='templateShortInput' placeholder='Defaults to \"All Category\"' value={values.templateCateInput} />\r\n                                </div>\r\n                                \r\n                                <div style={{marginTop:'20px'}}>\r\n                                    <label className=\"inputTemplateLabel\" htmlFor=\"templateNameInput\">Template Name:</label>\r\n                                    <Field validate={validateTemplateName} id=\"templateNameInput\" name=\"templateNameInput\" className='templateShortInput'  value={values.templateNameInput} />\r\n                                </div>\r\n                                {errors.templateNameInput && touched.templateNameInput && <Label id=\"template-name-error\" basic color='red' pointing>{errors.templateNameInput}</Label>}\r\n                                \r\n                                <div className=\"inputAreaTitle\">\r\n                                    <label className=\"inputTemplateLabel\" htmlFor=\"vbaInput\">Input your vba code</label>\r\n                                    <Button id=\"add-code-btn\" type=\"submit\" basic color='blue'> Add Code </Button>\r\n                                </div>\r\n\r\n                            </div>\r\n                            {errors.vbaInput && touched.vbaInput && <Label id=\"template-input-error\" basic color='red' >{errors.vbaInput}</Label>}\r\n                            <Field validate={validateInputs} as=\"textarea\" id=\"vbaInput\" name=\"vbaInput\" className='vba-code-textarea' placeholder='VBA Code Here' value={values.vbaInput}/>\r\n                            \r\n                        </Form>\r\n                        \r\n                    </div>\r\n                )}\r\n            </Formik>\r\n        </React.Fragment>\r\n        \r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        vaultID : state.appState['vaultid'],\r\n        templateCodeFlag: state.appState['templateSubmittedFlag'],\r\n        viewerMode : state.appState['viewerMode'],\r\n        firstTimeLoad: state.appState['firstTimeLoad']\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { setVaultID , vaultTemplateSubmitted }) (TemplateInputArea);","D:\\coding\\vba_vault\\vba_react\\src\\components\\create_vault\\vault_constructors\\templateDisplayConstructor.js",["105","106","107","108","109","110","111","112","113","114","115","116","117","118"],"D:\\coding\\vba_vault\\vba_react\\src\\components\\create_vault\\vault_constructors\\decorator_component\\navLinkBar.js",[],"D:\\coding\\vba_vault\\vba_react\\src\\components\\create_vault\\vault_constructors\\decorator_component\\setPasswordModal.js",["119","120","121","122"],"import React from 'react';\r\nimport { connect } from 'react-router-dom'\r\nimport {Field, Formik, Form} from 'formik';\r\nimport { Button, Label} from 'semantic-ui-react';\r\nimport Switch from 'react-switch'\r\nimport ReactDOM from 'react-dom';\r\n\r\nconst SetPasswordModal = (props) => {\r\n\r\n    const validateInitialPw = (value) => {\r\n        let error;\r\n        let pwRegex = new RegExp(\"\\W\", 'gm')\r\n        if (value.match(/\\W+/g)){\r\n            error = \"Must not contain any non-words\"\r\n        } else if (value === ''){\r\n            error = \"Must not be blank unless no password is enabled\"\r\n        }\r\n\r\n        return error\r\n    }\r\n\r\n    const validateConfirmPw = (initialPw, value) => {\r\n        console.log(initialPw, value)\r\n        let error;\r\n        if (initialPw !== value){\r\n            error = \"The passwords don't match! DUMBASS\"\r\n        } else if (value === '') {\r\n            error = \"Must not be blank unless no password is enabled. DUMBASS\"\r\n        }\r\n        console.log('this is the error', error)\r\n        return error\r\n    }\r\n\r\n\r\n    return (\r\n    <React.Fragment>\r\n        <Formik \r\n            initialValues = {{\r\n                'initialPw':'',\r\n                'confirmPw':''\r\n            }}\r\n            \r\n            onSubmit = {(values)=>{\r\n                console.log('formik set pw values', values)\r\n            }}\r\n        >\r\n        \r\n        {({values, errors, touched}) => (\r\n        \r\n            <Form className='set-pw-form'>\r\n                <p className=\"set-pw-maintitle\">Enter a password for deleting permissions</p>\r\n                <div className=\"set-pw-inner-cont\" style={{display:\"flex\"}}>\r\n                    <p className=\"set-pw-subtitle\">Don't set any password</p>\r\n                    <Switch\r\n                            // checked={props.viewerMode}\r\n                            // onChange={() => {props.vaultViewSwitch(props.viewerMode == true ? false : true )}}\r\n                            onColor=\"#86d3ff\"\r\n                            onHandleColor=\"#2693e6\"\r\n                            handleDiameter={30}\r\n                            uncheckedIcon={false}\r\n                            checkedIcon={false}\r\n                            boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\r\n                            activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\r\n                            height={20}\r\n                            width={48}\r\n                            className=\"react-switch adding-priv-toggle\"\r\n                            id=\"material-switch\"\r\n                    />\r\n                    <Button basic className=\"adding-priv-info\" color='green'>\r\n                        ?\r\n                    </Button>\r\n                </div>\r\n                <div className=\"set-pw-inner-cont\" style={{display:\"flex\"}}>\r\n                    <p className=\"set-pw-subtitle\">Enable for Adding templates</p>\r\n                    <Switch\r\n                            // checked={props.viewerMode}\r\n                            // onChange={() => {props.vaultViewSwitch(props.viewerMode == true ? false : true )}}\r\n                            onColor=\"#86d3ff\"\r\n                            onHandleColor=\"#2693e6\"\r\n                            handleDiameter={30}\r\n                            uncheckedIcon={false}\r\n                            checkedIcon={false}\r\n                            boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\r\n                            activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\r\n                            height={20}\r\n                            width={48}\r\n                            className=\"react-switch adding-priv-toggle\"\r\n                            id=\"material-switch\"\r\n                    />\r\n                    <Button basic className=\"adding-priv-info\" color='green'>\r\n                        ?\r\n                    </Button>\r\n                </div>\r\n                <div className=\"set-pw-input\">\r\n                    <Field type=\"password\"\r\n                        validate={validateInitialPw} \r\n                        id=\"initialPw\" \r\n                        name=\"initialPw\"\r\n                        value={values.initialPw}></Field>\r\n                    {errors.initialPw && touched.initialPw && <Label className=\"set-pw-error\" basic color='red' pointing>{errors.initialPw}</Label>}\r\n                    \r\n                    <Field type=\"password\"\r\n                        validate={(value) => validateConfirmPw(values.initialPw, value)}\r\n                        id=\"confirmPw\" \r\n                        name=\"confirmPw\"\r\n                        value={values.confirmPw}></Field>\r\n\r\n                    {errors.confirmPw && touched.confirmPw && <Label className=\"set-pw-error\" basic color='red' pointing>{errors.confirmPw}</Label>}\r\n                    <Button type=\"submit\" basic color='blue'> Submit Password </Button>\r\n                </div>\r\n            \r\n            </Form>\r\n        )}\r\n    </Formik>\r\n    </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default SetPasswordModal;","D:\\coding\\vba_vault\\vba_react\\src\\components\\create_vault\\vault_constructors\\decorator_component\\enterEditorPwModal.js",["123","124"],"import React from 'react';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { Button, Label} from 'semantic-ui-react';\r\nimport parseRequestAxio from '../../../../apis/parseRequest';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst EditorPwModalForm = (props) => {\r\n    \r\n    const validateEditorPw = (value) => {\r\n        console.log('this validate runs here')\r\n        let validPw;\r\n        let error;\r\n        parseRequestAxio.get('/validateEditPw/', {'vaultId': props.vaultID, 'editorPw': value}).then((response) => {\r\n            console.log('response from validateEditorPw', response)\r\n            validPw = response;\r\n        })\r\n\r\n        error = \"test error\"\r\n        return error\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Formik \r\n                initialValues = {{\r\n                    'initialPw':''\r\n                }}\r\n                \r\n                onSubmit = {(values)=>{\r\n                    console.log('formik set pw values', values)\r\n                }}\r\n            >\r\n            \r\n            {({values, validate, errors, touched}) => (\r\n            \r\n                <Form className='set-pw-form'>\r\n                    <p className=\"set-pw-maintitle\">Enter the password for editing permissions</p>\r\n                    <Field type=\"password\" \r\n                            id=\"initialPw\"\r\n                            name=\"initialPw\"\r\n                            validate={validateEditorPw}\r\n                            value={values.initialPw}>        \r\n                    </Field>\r\n                    {errors.initialPw && touched.initialPw && <div>{errors.initialPw}</div>}\r\n                    <Button type=\"submit\" basic color='blue'> Submit </Button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return (\r\n        {'vaultID': state.appState['vaultid']}\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps)(EditorPwModalForm)",["125","126"],{"ruleId":"127","severity":1,"message":"128","line":5,"column":25,"nodeType":"129","messageId":"130","endLine":5,"endColumn":35},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"127","severity":1,"message":"135","line":1,"column":28,"nodeType":"129","messageId":"130","endLine":1,"endColumn":36},{"ruleId":"127","severity":1,"message":"136","line":3,"column":10,"nodeType":"129","messageId":"130","endLine":3,"endColumn":16},{"ruleId":"127","severity":1,"message":"137","line":4,"column":10,"nodeType":"129","messageId":"130","endLine":4,"endColumn":16},{"ruleId":"127","severity":1,"message":"138","line":4,"column":18,"nodeType":"129","messageId":"130","endLine":4,"endColumn":23},{"ruleId":"127","severity":1,"message":"139","line":5,"column":8,"nodeType":"129","messageId":"130","endLine":5,"endColumn":24},{"ruleId":"140","severity":1,"message":"141","line":51,"column":8,"nodeType":"142","endLine":51,"endColumn":41,"suggestions":"143"},{"ruleId":"127","severity":1,"message":"144","line":4,"column":10,"nodeType":"129","messageId":"130","endLine":4,"endColumn":19},{"ruleId":"127","severity":1,"message":"145","line":5,"column":10,"nodeType":"129","messageId":"130","endLine":5,"endColumn":19},{"ruleId":"127","severity":1,"message":"146","line":5,"column":21,"nodeType":"129","messageId":"130","endLine":5,"endColumn":25},{"ruleId":"127","severity":1,"message":"147","line":11,"column":12,"nodeType":"129","messageId":"130","endLine":11,"endColumn":23},{"ruleId":"127","severity":1,"message":"148","line":11,"column":25,"nodeType":"129","messageId":"130","endLine":11,"endColumn":39},{"ruleId":"149","severity":1,"message":"150","line":21,"column":40,"nodeType":"151","messageId":"152","endLine":21,"endColumn":42},{"ruleId":"149","severity":1,"message":"153","line":57,"column":108,"nodeType":"151","messageId":"152","endLine":57,"endColumn":110},{"ruleId":"149","severity":1,"message":"150","line":81,"column":27,"nodeType":"151","messageId":"152","endLine":81,"endColumn":29},{"ruleId":"149","severity":1,"message":"150","line":89,"column":27,"nodeType":"151","messageId":"152","endLine":89,"endColumn":29},{"ruleId":"149","severity":1,"message":"150","line":98,"column":18,"nodeType":"151","messageId":"152","endLine":98,"endColumn":20},{"ruleId":"149","severity":1,"message":"150","line":146,"column":25,"nodeType":"151","messageId":"152","endLine":146,"endColumn":27},{"ruleId":"127","severity":1,"message":"154","line":14,"column":35,"nodeType":"129","messageId":"130","endLine":14,"endColumn":40},{"ruleId":"127","severity":1,"message":"155","line":27,"column":7,"nodeType":"129","messageId":"130","endLine":27,"endColumn":14},{"ruleId":"140","severity":1,"message":"156","line":34,"column":6,"nodeType":"142","endLine":34,"endColumn":45,"suggestions":"157"},{"ruleId":"140","severity":1,"message":"156","line":44,"column":6,"nodeType":"142","endLine":44,"endColumn":73,"suggestions":"158"},{"ruleId":"149","severity":1,"message":"150","line":102,"column":47,"nodeType":"151","messageId":"152","endLine":102,"endColumn":49},{"ruleId":"127","severity":1,"message":"159","line":158,"column":9,"nodeType":"129","messageId":"130","endLine":158,"endColumn":23},{"ruleId":"127","severity":1,"message":"160","line":23,"column":11,"nodeType":"129","messageId":"130","endLine":23,"endColumn":21},{"ruleId":"127","severity":1,"message":"161","line":75,"column":11,"nodeType":"129","messageId":"130","endLine":75,"endColumn":27},{"ruleId":"127","severity":1,"message":"162","line":97,"column":13,"nodeType":"129","messageId":"130","endLine":97,"endColumn":21},{"ruleId":"127","severity":1,"message":"163","line":1,"column":46,"nodeType":"129","messageId":"130","endLine":1,"endColumn":55},{"ruleId":"127","severity":1,"message":"136","line":2,"column":27,"nodeType":"129","messageId":"130","endLine":2,"endColumn":33},{"ruleId":"127","severity":1,"message":"164","line":4,"column":10,"nodeType":"129","messageId":"130","endLine":4,"endColumn":15},{"ruleId":"127","severity":1,"message":"165","line":14,"column":11,"nodeType":"129","messageId":"130","endLine":14,"endColumn":26},{"ruleId":"127","severity":1,"message":"166","line":15,"column":9,"nodeType":"129","messageId":"130","endLine":15,"endColumn":22},{"ruleId":"140","severity":1,"message":"167","line":31,"column":8,"nodeType":"142","endLine":31,"endColumn":52,"suggestions":"168"},{"ruleId":"149","severity":1,"message":"150","line":34,"column":26,"nodeType":"151","messageId":"152","endLine":34,"endColumn":28},{"ruleId":"169","severity":1,"message":"170","line":44,"column":43,"nodeType":"171","messageId":"152","endLine":44,"endColumn":135},{"ruleId":"169","severity":1,"message":"170","line":45,"column":42,"nodeType":"171","messageId":"152","endLine":45,"endColumn":124},{"ruleId":"127","severity":1,"message":"172","line":56,"column":53,"nodeType":"129","messageId":"130","endLine":56,"endColumn":68},{"ruleId":"127","severity":1,"message":"173","line":57,"column":51,"nodeType":"129","messageId":"130","endLine":57,"endColumn":65},{"ruleId":"174","severity":1,"message":"175","line":59,"column":45,"nodeType":"176","messageId":"177","endLine":59,"endColumn":47},{"ruleId":"127","severity":1,"message":"178","line":80,"column":13,"nodeType":"129","messageId":"130","endLine":80,"endColumn":22},{"ruleId":"127","severity":1,"message":"179","line":115,"column":11,"nodeType":"129","messageId":"130","endLine":115,"endColumn":18},{"ruleId":"127","severity":1,"message":"180","line":2,"column":10,"nodeType":"129","messageId":"130","endLine":2,"endColumn":17},{"ruleId":"127","severity":1,"message":"181","line":6,"column":8,"nodeType":"129","messageId":"130","endLine":6,"endColumn":16},{"ruleId":"127","severity":1,"message":"182","line":12,"column":13,"nodeType":"129","messageId":"130","endLine":12,"endColumn":20},{"ruleId":"183","severity":1,"message":"184","line":12,"column":35,"nodeType":"171","messageId":"185","endLine":12,"endColumn":36,"suggestions":"186"},{"ruleId":"127","severity":1,"message":"154","line":3,"column":18,"nodeType":"129","messageId":"130","endLine":3,"endColumn":23},{"ruleId":"127","severity":1,"message":"187","line":16,"column":13,"nodeType":"129","messageId":"130","endLine":16,"endColumn":20},{"ruleId":"131","replacedBy":"188"},{"ruleId":"133","replacedBy":"189"},"no-unused-vars","'HashRouter' is defined but never used.","Identifier","unusedVar","no-native-reassign",["190"],"no-negated-in-lhs",["191"],"'useState' is defined but never used.","'Button' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'parseRequestAxio' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["192"],"'propTypes' is defined but never used.","'Accordion' is defined but never used.","'Icon' is defined but never used.","'popupActive' is assigned a value but never used.","'setpopupActive' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'Label' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["193"],["194"],"'showSetPwModal' is assigned a value but never used.","'resetVault' is assigned a value but never used.","'validateCateName' is assigned a value but never used.","'response' is assigned a value but never used.","'createRef' is defined but never used.","'Alert' is defined but never used.","'templateCodeRef' is assigned a value but never used.","'previousState' is defined but never used.","React Hook useEffect has missing dependencies: 'history.location.hash' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["195"],"no-control-regex","Unexpected control character(s) in regular expression: \\x0a, \\x0a.","Literal","'split_code_func' is assigned a value but never used.","'split_code_sub' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'tmp_index' is defined but never used.","'linkBar' is assigned a value but never used.","'connect' is defined but never used.","'ReactDOM' is defined but never used.","'pwRegex' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\W.","unnecessaryEscape",["196","197"],"'validPw' is assigned a value but never used.",["190"],["191"],"no-global-assign","no-unsafe-negation",{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"messageId":"206","fix":"207","desc":"208"},{"messageId":"209","fix":"210","desc":"211"},"Update the dependencies array to be: [history, props, props.vaultid, props.viewerMode]",{"range":"212","text":"213"},"Update the dependencies array to be: [props, props.templateCodeFlag, props.vaultid]",{"range":"214","text":"215"},"Update the dependencies array to be: [props.menuOptions, props.menuItemSelected, props.vaultMenuClicked, props]",{"range":"216","text":"217"},"Update the dependencies array to be: [props.menuItemSelected, props.functionList, props, history.location.hash]",{"range":"218","text":"219"},"removeEscape",{"range":"220","text":"221"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"222","text":"223"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[2252,2285],"[history, props, props.vaultid, props.viewerMode]",[1277,1316],"[props, props.templateCodeFlag, props.vaultid]",[1573,1640],"[props.menuOptions, props.menuItemSelected, props.vaultMenuClicked, props]",[1295,1339],"[props.menuItemSelected, props.functionList, props, history.location.hash]",[379,380],"",[379,379],"\\"]